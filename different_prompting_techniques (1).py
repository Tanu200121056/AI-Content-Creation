# -*- coding: utf-8 -*-
"""Different Prompting Techniques.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tkyE4fe9AjhRNlOm_dRKbDgPRJmhNteb
"""

import os
import google.generativeai as genai

# Set the API key
api_key = 'AIzaSyBKgHIE7PF95yANGrq3SpmbusDgEhgCnE8'
os.environ['API_KEY'] = api_key

# Configure the API with the API key
genai.configure(api_key=os.environ["API_KEY"])

"""#### [1]  Iterative Prompting

"""

import re

def generate_mc_question(question_number):
    # Define the prompt
    prompt = (
        f"Generate a multiple-choice question about intelligent agents in the following format:\n"
        f"Q{question_number}: [Question Text]\n"
        f"Options:\n"
        f"(A) Option 1\n"
        f"(B) Option 2\n"
        f"(C) Option 3\n"
        f"(D) Option 4\n"
        f"Provide the correct answer option in the format: Answer: (X) Option X\n"
        f"Do not repeat the question number in the options or answer."
    )

    # Generate text using the API
    response = genai.generate_text(prompt=prompt)
    answer_text = response.result if hasattr(response, 'result') else response['generated_text']

    # Clean the output to remove duplicate question numbers
    # Example regex to remove duplicate "Q1: "
    cleaned_text = re.sub(r'(Q\d+:)\s+\1\s+', r'\1 ', answer_text)

    return cleaned_text.strip()

# Number of questions to generate
num_questions = 3  # Adjust as needed

for i in range(1, num_questions + 1):
    question_text = generate_mc_question(i)
    print(f"Q{i}: {question_text}\n")

"""### [2]   Analogical Prompting

"""

def generate_mc_question(question_number):
    # Define the prompt with analogical examples
    prompt = (
        f"Generate a multiple-choice question about intelligent agents. Here are some examples:\n\n"
        f"Example 1:\n"
        f"Q1: Which of the following is not a type of intelligent agent?\n"
        f"Options:\n"
        f"(A) Reactive agents\n"
        f"(B) Deliberative agents\n"
        f"(C) Proactive agents\n"
        f"(D) Intelligent control systems\n"
        f"Answer: (D) Intelligent control systems\n\n"

        f"Example 2:\n"
        f"Q2: Which of the following is not an example of an intelligent agent?\n"
        f"Options:\n"
        f"(A) A self-driving car\n"
        f"(B) A chess-playing computer program\n"
        f"(C) A search engine\n"
        f"(D) A thermostat\n"
        f"Answer: (D) A thermostat\n\n"

        f"Now, generate a new multiple-choice question about intelligent agents following the same format:\n"
        f"Q{question_number}: [Question Text]\n"
        f"Options:\n"
        f"(A) Option 1\n"
        f"(B) Option 2\n"
        f"(C) Option 3\n"
        f"(D) Option 4\n"
        f"Provide the correct answer option in the format: Answer: (X) Option X\n"
        f"Ensure that the question number is not repeated or included in the options or answers."
    )

    # Generate text using the API
    response = genai.generate_text(prompt=prompt)
    answer_text = response.result if hasattr(response, 'result') else response['generated_text']

    return answer_text.strip()

# Number of questions to generate
num_questions = 3  # Adjust as needed

for i in range(1, num_questions + 1):
    question_text = generate_mc_question(i)
    print(f"Q{i}: {question_text}\n")

"""#### [3]  Meta-Ask Self-Consistency Prompting"""

import re

def generate_mc_question(question_number, num_responses=3):
    prompt = (
        f"Generate a multiple-choice question about intelligent agents. Format it like this:\n"
        f"Options:\n"
        f"(A) Option 1\n"
        f"(B) Option 2\n"
        f"(C) Option 3\n"
        f"(D) Option 4\n"
        f"Provide the correct answer option in the format: Answer: (X) Option X\n"
        f"Ensure the question number is not repeated or included in the options or answers."
    )

    responses = []
    for _ in range(num_responses):
        response = genai.generate_text(prompt=prompt)
        responses.append(response.result if hasattr(response, 'result') else response['generated_text'])

    # Evaluate responses for consistency (basic example of picking the first non-redundant response)
    consistent_response = responses[0]  # Simplified approach, may need more sophisticated consistency check

    return consistent_response.strip()

# Number of questions to generate
num_questions = 3  # Adjust as needed

for i in range(1, num_questions + 1):
    question_text = generate_mc_question(i)
    print(f"Q{i}: {question_text}\n")

"""###### [4] ReAct Prompting"""

import google.generativeai as genai

def generate_reasoning(question_number):
    # Define the prompt for reasoning
    prompt = (
        f"Think about the concept of intelligent agents. Provide a brief reasoning or explanation about "
        f"what makes an intelligent agent and what distinguishes it from other systems. "
        f"Then, use this reasoning to generate a multiple-choice question about intelligent agents. "
        f"Format the question like this:\n"
        f"Q{question_number}: [Question Text]\n"
        f"Options:\n"
        f"(A) Option 1\n"
        f"(B) Option 2\n"
        f"(C) Option 3\n"
        f"(D) Option 4\n"
        f"Provide the correct answer option in the format: Answer: (X) Option X."
    )

    # Generate reasoning and question using the API
    response = genai.generate_text(prompt=prompt)
    answer_text = response.result if hasattr(response, 'result') else response['generated_text']

    return answer_text.strip()

# Number of questions to generate
num_questions = 3  # Adjust as needed

for i in range(1, num_questions + 1):
    question_text = generate_reasoning(i)
    print(f"Q{i}: {question_text}\n")

"""#### [5] Symbolic Reasoning prompting Techniques"""

import google.generativeai as genai

def generate_symbolic_reasoning_question(question_number):
    # Define the prompt with symbolic reasoning
    prompt = (
        f"Use symbolic reasoning to generate a multiple-choice question about intelligent agents. "
        f"Consider the following symbolic logic and concepts:\n\n"
        f"1. Intelligent agents (IA) are systems that perceive their environment through sensors and act upon it through actuators.\n"
        f"2. Types of intelligent agents include reactive agents, deliberative agents, and hybrid agents.\n"
        f"3. Intelligent agents can be distinguished from traditional systems by their ability to learn and adapt.\n\n"
        f"Generate a question in this format:\n"
        f"Q{question_number}: [Question Text]\n"
        f"Options:\n"
        f"(A) Option 1\n"
        f"(B) Option 2\n"
        f"(C) Option 3\n"
        f"(D) Option 4\n"
        f"Provide the correct answer option in the format: Answer: (X) Option X."
    )

    # Generate the question using the API
    response = genai.generate_text(prompt=prompt)
    answer_text = response.result if hasattr(response, 'result') else response['generated_text']

    return answer_text.strip()

# Number of questions to generate
num_questions = 3  # Adjust as needed

for i in range(1, num_questions + 1):
    question_text = generate_symbolic_reasoning_question(i)
    print(f"Q{i}: {question_text}\n")

"""######**[6] Step-Back Prompting**

"""

import google.generativeai as genai


def generate_component(prompt):
    # Generate a response based on the given prompt
    response = genai.generate_text(prompt=prompt)
    return response.result if hasattr(response, 'result') else response['generated_text']

def step_back_prompting(question_number):
    # Step 1: Generate a question
    question_prompt = (
        f"Generate a question about intelligent agents that focuses on one key concept or feature. "
        f"Format it like this: 'What is [concept]?'"
    )
    question_text = generate_component(question_prompt)

    # Step 2: Generate options for the question
    options_prompt = (
        f"Generate four multiple-choice options for the following question: '{question_text}'. "
        f"Include one correct option and three distractors."
    )
    options_text = generate_component(options_prompt)

    # Step 3: Provide the correct answer
    answer_prompt = (
        f"Based on the following question and options, identify the correct answer. "
        f"Question: '{question_text}' Options: {options_text}"
    )
    answer_text = generate_component(answer_prompt)

    return f"Q{question_number}: {question_text}\nOptions:\n{options_text}\nAnswer: {answer_text}"

# Number of questions to generate
num_questions = 3  # Adjust as needed

for i in range(1, num_questions + 1):
    question_text = step_back_prompting(i)
    print(f"Q{i}: {question_text}\n")

"""#### [7]  Input-Output Prompting"""

import google.generativeai as genai

def generate_input_output_prompt(question_number):
    # Define the input format
    input_prompt = (
        f"Input: Generate a multiple-choice question about intelligent agents. "
        f"Ensure the question is clear and includes four options."
    )

    # Define the output format
    output_format = (
        f"Output Format:\n"
        f"Q{question_number}: [Question Text]\n"
        f"Options:\n"
        f"(A) Option 1\n"
        f"(B) Option 2\n"
        f"(C) Option 3\n"
        f"(D) Option 4\n"
        f"Answer: (X) Option X"
    )

    # Combine input and output format into a single prompt
    full_prompt = f"{input_prompt}\n{output_format}"

    # Generate the question using the API
    response = genai.generate_text(prompt=full_prompt)
    return response.result if hasattr(response, 'result') else response['generated_text']

# Number of questions to generate
num_questions = 3  # Adjust as needed

for i in range(1, num_questions + 1):
    question_text = generate_input_output_prompt(i)
    print(f"Q{i}: {question_text}\n")

"""##### [8] Chain of Thought Prompting Technique

"""

import google.generativeai as genai

def chain_of_thought_prompting(question_number):
    # Step 1: Define the problem
    problem_prompt = (
        f"Generate a multiple-choice question about intelligent agents. Start by reasoning through the following steps:\n"
        f"1. Identify a key concept or feature of intelligent agents.\n"
        f"2. Consider the characteristics and examples related to this concept.\n"
        f"3. Formulate a question that tests understanding of this concept.\n"
        f"4. Generate four options including one correct answer and three distractors.\n"
        f"5. Provide the correct answer option."
    )

    # Generate the question and options using the API
    response = genai.generate_text(prompt=problem_prompt)
    answer_text = response.result if hasattr(response, 'result') else response['generated_text']

    return f"Q{question_number}: {answer_text.strip()}"

# Number of questions to generate
num_questions = 3  # Adjust as needed

for i in range(1, num_questions + 1):
    question_text = chain_of_thought_prompting(i)
    print(f"Q{i}: {question_text}\n")

"""##### [9] Self - Critique Prompting Technique"""

import google.generativeai as genai


def generate_initial_question(question_number):
    # Define the initial prompt
    initial_prompt = (
        f"Generate a multiple-choice question about intelligent agents. "
        f"Include four options with one correct answer and three distractors."
    )

    # Generate the initial question using the API
    response = genai.generate_text(prompt=initial_prompt)
    return response.result if hasattr(response, 'result') else response['generated_text']

def critique_and_improve(question_number, initial_question):
    # Define the self-critique prompt
    critique_prompt = (
        f"Review the following multiple-choice question and options. "
        f"Identify any issues with clarity, accuracy, or relevance and suggest improvements.\n\n"
        f"Question: {initial_question}\n"
        f"Provide a refined version of this question and options."
    )

    # Generate critique and improved question
    response = genai.generate_text(prompt=critique_prompt)
    return response.result if hasattr(response, 'result') else response['generated_text']

def self_critique_prompting(question_number):
    # Generate the initial question
    initial_question = generate_initial_question(question_number)

    # Critique and improve the question
    refined_question = critique_and_improve(question_number, initial_question)

    return f"Q{question_number}: {refined_question.strip()}"

# Number of questions to generate
num_questions = 3  # Adjust as needed

for i in range(1, num_questions + 1):
    question_text = self_critique_prompting(i)
    print(f"Q{i}: {question_text}\n")

"""##### [10] Self Refinement Prompting Technique"""

import google.generativeai as genai

def generate_initial_question(question_number):
    # Define the initial prompt
    initial_prompt = (
        f"Generate a multiple-choice question about intelligent agents. "
        f"Include four options with one correct answer and three distractors."
    )

    # Generate the initial question using the API
    response = genai.generate_text(prompt=initial_prompt)
    return response.result if hasattr(response, 'result') else response['generated_text']

def refine_question(initial_question):
    # Define the refinement prompt
    refinement_prompt = (
        f"Review the following multiple-choice question and options. "
        f"Identify any issues with clarity, accuracy, or relevance and provide a refined version.\n\n"
        f"Question: {initial_question}\n"
        f"Refine this question and options to improve quality."
    )

    # Generate the refined question using the API
    response = genai.generate_text(prompt=refinement_prompt)
    return response.result if hasattr(response, 'result') else response['generated_text']

def self_refinement_prompting(question_number):
    # Generate the initial question
    initial_question = generate_initial_question(question_number)

    # Refine the question based on the initial response
    refined_question = refine_question(initial_question)

    return f"Q{question_number}: {refined_question.strip()}"

# Number of questions to generate
num_questions = 3  # Adjust as needed

for i in range(1, num_questions + 1):
    question_text = self_refinement_prompting(i)
    print(f"Q{i}: {question_text}\n")

"""##### [11] Generated Knowledge prompting Technique"""

import os
import google.generativeai as genai

def generate_knowledge_based_question(question_number, new_knowledge):
    # Define the prompt with new knowledge
    prompt = (
        f"Here is some new information: {new_knowledge}\n"
        f"Based on this information, generate a multiple-choice question about intelligent agents. "
        f"Include four options with one correct answer and three distractors. Clearly specify the correct answer."
    )

    # Generate the question using the API
    response = genai.generate_text(prompt=prompt)
    return response.result if hasattr(response, 'result') else response['generated_text']

# Example new knowledge to introduce
new_knowledge = (
    "The Turing Test, proposed by Alan Turing, is a method to determine if a machine exhibits intelligent behavior "
    "equivalent to or indistinguishable from that of a human. A machine passes the test if a human evaluator cannot "
    "distinguish the machine's responses from those of a human in a conversation."
)

# Number of questions to generate
num_questions = 3  # Adjust as needed

for i in range(1, num_questions + 1):
    question_text = generate_knowledge_based_question(i, new_knowledge)
    print(f"Q{i}: {question_text}\n")

"""###### [12] Least-to-Most prompting Technique"""

import google.generativeai as genai

def generate_broad_question(question_number):
    # Define the initial broad prompt
    broad_prompt = (
        "Generate a multiple-choice question about intelligent agents."
    )

    # Generate the initial broad question using the API
    response = genai.generate_text(prompt=broad_prompt)
    return response.result if hasattr(response, 'result') else response['generated_text']

def refine_question(initial_question):
    # Define the refinement prompt with additional context
    refinement_prompt = (
        f"Review the following question about intelligent agents. "
        f"Refine it by adding more context or details to improve clarity and accuracy.\n\n"
        f"Question: {initial_question}\n"
        f"Provide a refined version of this question with four options and the correct answer."
    )

    # Generate the refined question using the API
    response = genai.generate_text(prompt=refinement_prompt)
    return response.result if hasattr(response, 'result') else response['generated_text']

def least_to_most_prompting(question_number):
    # Generate the initial broad question
    initial_question = generate_broad_question(question_number)

    # Refine the question based on the initial response
    refined_question = refine_question(initial_question)

    return f"Q{question_number}: {refined_question.strip()}"

# Number of questions to generate
num_questions = 3  # Adjust as needed

for i in range(1, num_questions + 1):
    question_text = least_to_most_prompting(i)
    print(f"Q{i}: {question_text}\n")

"""##### [13] PAL Prompting Technique"""

def generate_initial_question():
    # Define the initial prompt
    initial_prompt = (
        "Generate a multiple-choice question about intelligent agents. "
        "Include four options with one correct answer and three distractors."
    )

    # Generate the initial question using the API
    response = genai.generate_text(prompt=initial_prompt)
    return response.result if hasattr(response, 'result') else response['generated_text']

def create_adversarial_prompt(initial_question):
    # Define adversarial prompts based on the initial question
    adversarial_prompt = (
        f"Review the following question and create a challenging version to test the model's understanding.\n\n"
        f"Question: {initial_question}\n"
        f"Provide an adversarial example that tests edge cases or less obvious aspects."
    )

    # Generate the adversarial prompt using the API
    response = genai.generate_text(prompt=adversarial_prompt)
    return response.result if hasattr(response, 'result') else response['generated_text']

def refine_question_with_adversarial_feedback(initial_question):
    # Generate an adversarial prompt
    adversarial_prompt = create_adversarial_prompt(initial_question)

    # Use the adversarial prompt to refine the question
    refinement_prompt = (
        f"Refine the initial question based on the following adversarial feedback.\n\n"
        f"Initial Question: {initial_question}\n"
        f"Adversarial Prompt: {adversarial_prompt}\n"
        f"Provide a refined version with clear options and correct answer."
    )

    # Generate the refined question using the API
    response = genai.generate_text(prompt=refinement_prompt)
    return response.result if hasattr(response, 'result') else response['generated_text']

def generate_multiple_questions(num_questions):
    questions = []
    for i in range(num_questions):
        # Generate and refine a question
        initial_question = generate_initial_question()
        refined_question = refine_question_with_adversarial_feedback(initial_question)
        questions.append(f"Q{i + 1}: {refined_question.strip()}\n")

    return questions

# Number of questions to generate
num_questions = 5  # Adjust this number as needed

# Generate questions
questions = generate_multiple_questions(num_questions)

# Print questions
for question in questions:
    print(question)

"""#### [14] Graph of Thought Prompting Technique"""

def define_concept_map():
    # Define key concepts and their relationships
    concepts = {
        'intelligent_agents': ['reactive agents', 'proactive agents', 'deliberative agents'],
        'reactive_agents': ['simple reflex agents', 'model-based agents'],
        'proactive_agents': ['goal-based agents', 'utility-based agents'],
        'deliberative_agents': ['planning agents', 'decision-making agents']
    }
    return concepts

def generate_structured_prompt(concepts):
    # Create a prompt based on the concept map
    prompt = (
        "Based on the following concept map, generate a multiple-choice question about intelligent agents. "
        "Include four options with one correct answer and three distractors.\n\n"
        "Concepts:\n"
    )

    for concept, details in concepts.items():
        prompt += f"{concept}: {', '.join(details)}\n"

    prompt += (
        "Please generate a question that tests understanding of the relationships between these concepts."
    )

    return prompt

def generate_question(prompt):
    # Generate a question using the API
    response = genai.generate_text(prompt=prompt)
    return response.result if hasattr(response, 'result') else response['generated_text']

def graph_of_thought_prompting(num_questions):
    questions = []
    concepts = define_concept_map()

    for _ in range(num_questions):
        # Generate structured prompt based on concept map
        structured_prompt = generate_structured_prompt(concepts)
        question = generate_question(structured_prompt)
        questions.append(question.strip())

    return questions

# Number of questions to generate
num_questions = 3  # Adjust this number as needed

# Generate questions
questions = graph_of_thought_prompting(num_questions)

# Print questions
for i, question in enumerate(questions, 1):
    print(f"Q{i}: {question}\n")

"""#### [15] Graph of Verification Prompting Technique"""

def define_verification_framework():
    # Define key concepts and their relationships for verification
    concepts = {
        'intelligent_agents': ['reactive agents', 'proactive agents', 'deliberative agents'],
        'reactive_agents': ['simple reflex agents', 'model-based agents'],
        'proactive_agents': ['goal-based agents', 'utility-based agents'],
        'deliberative_agents': ['planning agents', 'decision-making agents']
    }
    return concepts

def create_verification_prompt(concepts):
    # Create a prompt to verify the correctness and consistency of the information
    prompt = (
        "Based on the following concept map, verify the correctness of the information about intelligent agents. "
        "Identify if the provided statements are correct or incorrect.\n\n"
        "Concepts and Relationships:\n"
    )

    for concept, details in concepts.items():
        prompt += f"{concept}: {', '.join(details)}\n"

    prompt += (
        "Here are some statements related to these concepts. Check if these statements correctly represent the relationships.\n"
        "1. Proactive agents include goal-based and utility-based agents.\n"
        "2. Reactive agents involve complex planning.\n"
        "3. Deliberative agents can be divided into planning and decision-making agents.\n"
        "Provide your verification and explain any inconsistencies or corrections."
    )

    return prompt

def generate_verification_response(prompt):
    # Generate a verification response using the API
    response = genai.generate_text(prompt=prompt)
    return response.result if hasattr(response, 'result') else response['generated_text']

def graph_of_verification_prompting():
    concepts = define_verification_framework()
    verification_prompt = create_verification_prompt(concepts)
    response = generate_verification_response(verification_prompt)
    return response.strip()

# Generate verification response
verification_response = graph_of_verification_prompting()

# Print response
print("Verification Response:\n", verification_response)